<?xml version="1.0"?>
<launch>
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="verbose" default="false"/>
    <arg name="rviz" default="false"/>
    <arg name="control" default="none"/>

    <env name="GAZEBO_MODEL_PATH" value="$(find triton)/models"/>
    <env name="LIBGL_ALWAYS_SOFTWARE" value="0"/>

    <include file="$(find gazebo_ros)/launch/empty_world.launch">
         <arg name="world_name" value="$(find triton)/worlds/obstacle_world.sdf"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="headless" value="$(arg headless)"/>
        <arg name="verbose" value="$(arg verbose)"/>
    </include>

    <param name="robot_description" command="$(find xacro)/xacro $(find triton)/urdf/catamaran_full.urdf.xacro"/>

    <node pkg="gazebo_ros" type="spawn_model" name="spawn_model" args="-urdf -param robot_description -model catamaran_full -x -7 -y 0 -z 2.1 -R 0 -P 0 -Y 1.570796327"/>

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher"/>

    <group if="$(eval arg('control') == 'force')">
        <node name="thruster_teleop" pkg="triton" type="thruster_teleop.py" output="screen" launch-prefix="xterm -e"/>
    </group>

    <group if="$(eval arg('control') == 'velocity')">
        <node name="velocity_teleop" pkg="triton" type="velocity_teleop.py" output="screen" launch-prefix="xterm -e"/>
    </group>

    <node if="$(arg rviz)" name="rviz" pkg="rviz" type="rviz" args="-d $(find triton)/config/config.rviz"/>


    <!-- Navigation Stack -->
    <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
        <!-- Frame names -->
        <param name="pub_map_odom_transform" value="true"/>
        <param name="map_frame" value="map" />
        <param name="base_frame" value="base_footprint"/>
        <param name="odom_frame" value="base_footprint"/>

        <param name="update_factor_free" value="0.2"/> <!-- Adjust this value as needed -->
        <param name="update_factor_occupied" value="0.8"/> <!-- Adjust this value as needed -->
        <param name="map_update_distance_thresh" value="0.2"/> <!-- Lower value for more frequent updates -->
        <param name="map_update_angle_thresh" value="0.05"/> <!-- Lower value for more frequent updates -->
        <param name="map_pub_period" value="0.1"/> <!-- Lower value for higher frequency map publishing -->
    </node>

    <node pkg="hector_trajectory_server" type="hector_trajectory_server" name="trajectory_server" output="screen">
        <param name="map_frame" value="map" />
        <param name="base_frame" value="base_footprint" />
        <param name="odom_frame" value="base_footprint" />
    </node>

    <node pkg="tf2_ros" type="static_transform_publisher" name="static_transform_publisher" args="0 0 0 0 0 0 odom map" />
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
        <rosparam file="$(find triton)/config/move_base/costmap_common_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find triton)/config/move_base/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find triton)/config/move_base/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find triton)/config/move_base/global_costmap_params.yaml" command="load" />
        <rosparam file="$(find triton)/config/move_base/move_base_params.yaml" command="load" />
        <rosparam file="$(find triton)/config/move_base/dwa_local_planner_params.yaml" command="load" />
    </node>
    
</launch>